package eu.solven.adhoc.column.generated_column;

import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import eu.solven.adhoc.beta.schema.CoordinatesSample;
import eu.solven.adhoc.measure.model.IMeasure;
import eu.solven.adhoc.measure.operator.IOperatorsFactory;
import eu.solven.adhoc.query.filter.value.IValueMatcher;

/**
 * Helpers related to {@link ICompositeColumnGenerator}.
 * 
 * @author Benoit Lacelle
 */
public class ColumnGeneratorHelpers {

	/**
	 * Scan for {@link ICompositeColumnGenerator} amongst given measures, matching given column.
	 * 
	 * @param operatorsFactory
	 * @param measures
	 * @param column
	 * @return a List of {@link ICompositeColumnGenerator} given single column may be generated by multiple measures.
	 */
	public static List<ICompositeColumnGenerator> getColumnGenerators(IOperatorsFactory operatorsFactory,
			Collection<IMeasure> measures,
			IValueMatcher columnMatcher) {
		return measures.stream()
				.filter(m -> m instanceof IMayHaveColumnGenerator)
				.map(m -> (IMayHaveColumnGenerator) m)
				.map(m -> m.optColumnGenerator(operatorsFactory))
				.flatMap(o -> o.stream())
				.filter(columnGenerator -> columnGenerator.getColumnTypes()
						.keySet()
						.stream()
						.anyMatch(columnMatcher::match))
				.toList();
	}

	/**
	 * 
	 * @param columnGenerators
	 * @param column
	 * @param valueMatcher
	 * @param limit
	 * @return a merged {@link CoordinatesSample} given the {@link ICompositeColumnGenerator}
	 */
	public static CoordinatesSample getCoordinates(List<ICompositeColumnGenerator> columnGenerators,
			String column,
			IValueMatcher valueMatcher,
			int limit) {
		Set<CoordinatesSample> samples = new LinkedHashSet<>();

		columnGenerators.stream().forEach(m -> {
			samples.add(m.getCoordinates(column, valueMatcher, limit));
		});

		long estimatedCardinality = 0L;
		Set<Object> coordinates = new LinkedHashSet<>();

		for (CoordinatesSample sample : samples) {
			// SUM estimatedCardinality is an acceptable estimation
			long sampleEstimatedCardinality = sample.getEstimatedCardinality();
			if (sampleEstimatedCardinality != CoordinatesSample.NO_ESTIMATION) {
				estimatedCardinality += sampleEstimatedCardinality;
			}
			// The union may grow beyond `limit: OK
			coordinates.addAll(sample.getCoordinates());
		}

		return CoordinatesSample.builder().estimatedCardinality(estimatedCardinality).coordinates(coordinates).build();
	}
}
