/**
 * The MIT License
 * Copyright (c) 2024 Benoit Chatain Lacelle - SOLVEN
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package eu.solven.adhoc.measure.decomposition;

import java.util.List;

import eu.solven.adhoc.column.generated_column.IColumnGenerator;
import eu.solven.adhoc.engine.step.CubeQueryStep;
import eu.solven.adhoc.engine.step.ISliceWithStep;
import eu.solven.adhoc.measure.transformator.step.DispatchorQueryStep;
import eu.solven.adhoc.query.cube.IWhereGroupByQuery;

/**
 * Used for {@link eu.solven.adhoc.measure.model.IMeasure} which generates/contributes into multiple slices given an
 * underlying slice. It may be used for rebucketing (e.g. `123 on 0.2` may be decomposed into `123*0.2 into 0 and
 * 123*0.8 into 1.0`).
 *
 * Also used for many2many: each input element is decomposed into its target groups.
 * 
 * @author Benoit Lacelle
 */
public interface IDecomposition extends IColumnGenerator {
	/**
	 * BEWARE This may return entries at the requested granularity, or finer. (e.g. request for `countryGroup=*` may
	 * returns as decomposedSlice `countryGroup=G8&country=FR`). {@link DispatchorQueryStep} will compute the proper
	 * coordinates given the received (finer) contribution.
	 * 
	 * BEWARE This may return entries irrelevant according to the filter. These would be filtered by
	 * {@link DispatchorQueryStep}. (e.g. request for `countryGroup=G8|country=FR` may return
	 * `country_group=G8&country=UK`). In case filters is not strictly implemented by the {@link IDecomposition}, then
	 * filtered columns must be returned by the decompositions (so that {@link DispatchorQueryStep} can apply proper
	 * filtering (e.g. given complex filter combining decomposed columns and other columns)).
	 * 
	 * BEWARE This **must** returns columns requested as groupBy. Some simple implementations may always express all
	 * decomposed/generated columns; but it is not reasonable in some case (e.g. DuplicatingDecomposition would prefer
	 * not generating the whole Cartesian product if not necessary).
	 * 
	 * @param slice
	 *            an element/underlying slice
	 * @param value
	 * @return the target/pillars/groups slices, each associated to a value (may be the input value, or a fraction of
	 *         it, or anything else). Each entry must express all groupByColumns (in `slice.getStep()`). They may
	 *         express additional columns if it is simpler for the implementation.
	 * 
	 */
	List<IDecompositionEntry> decompose(ISliceWithStep slice, Object value);

	/**
	 * Given a query step, returns the underlying {@link IWhereGroupByQuery}s.
	 * 
	 * For instance, given `group=G8`, we would query `country=in=FR,US,UK,etc`.
	 * 
	 * @param step
	 * @return the steps which are read by decompositions. It may suppress some columns (e.g. the columns generated by
	 *         the decomposition).
	 */
	List<IWhereGroupByQuery> getUnderlyingSteps(CubeQueryStep step);
}
