/**
 * The MIT License
 * Copyright (c) 2024 Benoit Chatain Lacelle - SOLVEN
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package eu.solven.adhoc.measure.decomposition;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import eu.solven.adhoc.column.IAdhocColumn;
import eu.solven.adhoc.engine.step.CubeQueryStep;
import eu.solven.adhoc.engine.step.ISliceWithStep;
import eu.solven.adhoc.filter.editor.SimpleFilterEditor;
import eu.solven.adhoc.measure.transformator.column_generator.IColumnGenerator;
import eu.solven.adhoc.query.MeasurelessQuery;
import eu.solven.adhoc.query.MeasurelessQuery.MeasurelessQueryBuilder;
import eu.solven.adhoc.query.cube.IWhereGroupByQuery;
import eu.solven.adhoc.query.filter.FilterHelpers;
import eu.solven.adhoc.query.filter.IAdhocFilter;
import eu.solven.adhoc.query.groupby.GroupByColumns;

/**
 * Used for {@link eu.solven.adhoc.measure.model.IMeasure} which generates/contributes into multiple slices given an
 * underlying slice. It may be used for rebucketing (e.g. `123 on 0.2` may be decomposed into `123*0.2 into 0 and
 * 123*0.8 into 1.0`).
 *
 * Also used for many2many: each input element is decomposed into its target groups.
 */
public interface IDecomposition extends IColumnGenerator {
	/**
	 *
	 * @param slice
	 *            an element/underlying slice
	 * @param value
	 * @return the target/pillars/groups slices
	 */
	Map<? extends Map<String, ?>, ?> decompose(ISliceWithStep slice, Object value);

	/**
	 * @param step
	 * @return the steps which are read by decompositions. It may suppress come columns (e.g. the columns generated by
	 *         the decomposition).
	 */
	List<IWhereGroupByQuery> getUnderlyingSteps(CubeQueryStep step);

	static MeasurelessQuery suppressColumn(IWhereGroupByQuery step, String column) {
		MeasurelessQueryBuilder underlyingStep = MeasurelessQuery.edit(step);

		if (step.getGroupBy().getGroupedByColumns().contains(column)) {
			// Underlying measure handles an array: `scenarioIndex` is meaningless
			Map<String, IAdhocColumn> groupByWithoutIndex = new LinkedHashMap<>(step.getGroupBy().getNameToColumn());
			groupByWithoutIndex.remove(column);
			underlyingStep.groupBy(GroupByColumns.of(groupByWithoutIndex.values())).build();
		}

		if (FilterHelpers.getFilteredColumns(step.getFilter()).contains(column)) {
			// Underlying measure handles an array: `scenarioIndex` is meaningless
			IAdhocFilter supressedFilter = SimpleFilterEditor.suppressColumn(step.getFilter(), Set.of(column));

			underlyingStep.filter(supressedFilter);
			// BEWARE In a different design, we should ensure we query only the relevant underlying double columns.
			// This is not done here as it would require more coupled logics
		}

		return underlyingStep.build();
	}
}
