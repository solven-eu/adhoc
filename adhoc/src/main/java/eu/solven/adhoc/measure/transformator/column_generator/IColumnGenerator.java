/**
 * The MIT License
 * Copyright (c) 2025 Benoit Chatain Lacelle - SOLVEN
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package eu.solven.adhoc.measure.transformator.column_generator;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import eu.solven.adhoc.beta.schema.CoordinatesSample;
import eu.solven.adhoc.measure.IOperatorsFactory;
import eu.solven.adhoc.measure.decomposition.IDecomposition;
import eu.solven.adhoc.measure.model.Aggregator;
import eu.solven.adhoc.measure.model.IMeasure;
import eu.solven.adhoc.query.filter.value.IValueMatcher;
import eu.solven.adhoc.util.IHasColumns;

/**
 * Relates to measures generating their own columns.
 * 
 * @author Benoit Lacelle
 */
public interface IColumnGenerator extends IHasColumns {
	/**
	 * The default coordinate to use when an {@link Aggregator} is queried along a suppressed column, typically
	 * generated by a {@link IColumnGenerator}
	 */
	Object COORDINATE_GENERATED = "generated";

	/**
	 * Scan for {@link IColumnGenerator} amongst given measures, matching given column.
	 * 
	 * @param operatorsFactory
	 * @param measures
	 * @param column
	 * @return a List of {@link IColumnGenerator} given single column may be generated by multiple measures.
	 */
	static List<IColumnGenerator> getColumnGenerators(IOperatorsFactory operatorsFactory,
			Collection<IMeasure> measures,
			IValueMatcher columnMatcher) {
		return measures.stream()
				.filter(m -> m instanceof IMayHaveColumnGenerator)
				.map(m -> (IMayHaveColumnGenerator) m)
				.map(m -> m.optColumnGenerator(operatorsFactory))
				.flatMap(o -> o.stream())
				.filter(columnGenerator -> columnGenerator.getColumns()
						.keySet()
						.stream()
						.anyMatch(columnMatcher::match))
				.toList();
	}

	static CoordinatesSample getCoordinates(List<IColumnGenerator> columnGenerators,
			String column,
			IValueMatcher valueMatcher,
			int limit) {
		Set<CoordinatesSample> samples = new HashSet<>();

		columnGenerators.stream().forEach(m -> {
			samples.add(m.getCoordinates(column, valueMatcher, limit));
		});

		long estimatedCardinality = 0L;
		Set<Object> coordinates = new HashSet<>();

		for (CoordinatesSample sample : samples) {
			// SUM estimatedCardinality is an acceptable estimation
			long sampleEstimatedCardinality = sample.getEstimatedCardinality();
			if (sampleEstimatedCardinality != CoordinatesSample.NO_ESTIMATION) {
				estimatedCardinality += sampleEstimatedCardinality;
			}
			// The union may grow beyond `limit: OK
			coordinates.addAll(sample.getCoordinates());
		}

		return CoordinatesSample.builder().estimatedCardinality(estimatedCardinality).coordinates(coordinates).build();
	}

	/**
	 * 
	 * @param column
	 * @param valueMatcher
	 * @param limit
	 * @return a {@link CoordinatesSample} about given column generated by this {@link IDecomposition}
	 */
	CoordinatesSample getCoordinates(String column, IValueMatcher valueMatcher, int limit);
}
